```dataviewjs
async function updateInbox() {
    const filePath = "! üìímy tasks/!üì•my.md";
        
    // Naƒçti soubor
    let file = app.vault.getAbstractFileByPath(filePath);
    let inbox = "";
    if (file) {
        try {
            // ƒåti soubor a poƒçkej, ne≈æ se to dokonƒç√≠
            let content = await app.vault.read(file);
           // Rozdƒõl obsah na ≈ô√°dky a spoƒç√≠tej jejich poƒçet
			let lines = content.split('\n');
			let lineCount = (lines.length === 1 && lines[0] === "") ? 0 : lines.length;
            // Uprav hodnotu promƒõnn√© inbox
            inbox = `[[!üì•work]] (‚Äã${lineCount})`;
        } catch (err) {
            // O≈°et≈ôi p≈ô√≠padnou chybu p≈ôi ƒçten√≠ souboru
            inbox = "Error reading file: " + err;
        }
    } else {
        inbox = "Inbox " + filePath + " not found.";
    }
    return inbox;
}

// Z√≠sk√°n√≠ dne≈°n√≠ho dne a zaƒç√°tk≈Ø posledn√≠ch 7 a 30 dn√≠
var todayDate = moment().format('YYYY-MM-DD');
var last7Days = moment().subtract(7, 'days').format('YYYY-MM-DD');   // P≈ôed 7 dny
var last30Days = moment().subtract(30, 'days').format('YYYY-MM-DD'); // P≈ôed 30 dny

// Funkce pro filtrov√°n√≠ √∫kol≈Ø podle ƒçasov√©ho √∫seku
function countTasksInRange(tasks, rangeStart, rangeEnd) {
    let added = tasks.filter(t => t.text.includes('‚ûï') && t.text.match(/\d{4}-\d{2}-\d{2}/)[0] >= rangeStart && t.text.match(/\d{4}-\d{2}-\d{2}/)[0] <= rangeEnd).length;
    let completed = tasks.filter(t => t.completed && t.text.includes('‚úÖ') && t.text.match(/\d{4}-\d{2}-\d{2}/)[0] >= rangeStart && t.text.match(/\d{4}-\d{2}-\d{2}/)[0] <= rangeEnd).length;
    return { added: added, completed: completed, difference: added - completed };  // Vrac√≠ objekt s p≈ôidan√Ωmi, vy≈ôe≈°en√Ωmi √∫koly a rozd√≠lem
}

// Z√≠sk√°n√≠ v≈°ech √∫kol≈Ø
var tasks = dv.pages().file.tasks;

// Poƒçet √∫kol≈Ø za den (Dnes)
var dayTasks = countTasksInRange(tasks, todayDate, todayDate);

// Poƒçet √∫kol≈Ø za posledn√≠ch 7 dn√≠ (T√Ωden)
var last7DaysTasks = countTasksInRange(tasks, last7Days, todayDate);

// Poƒçet √∫kol≈Ø za posledn√≠ch 30 dn√≠ (Mƒõs√≠c)
var last30DaysTasks = countTasksInRange(tasks, last30Days, todayDate);

// Zavol√°n√≠ asynchronn√≠ funkce updateInbox a n√°sledn√© zpracov√°n√≠ v√Ωsledku
updateInbox().then(inboxValue => {
    // Pomocn√° funkce pro barevn√© form√°tov√°n√≠ rozd√≠lu
    function formatDifference(diff) {
        if (diff > 0) {
            return `<span style="color: red;">${diff}</span>`; // Kladn√° diference - ƒçerven√°
        } else {
            return `<span style="color: green;">${diff}</span>`; // Z√°porn√° diference - zelen√°
        }
    }

    // V√Ωpis v√Ωsledk≈Ø na jednom ≈ô√°dku s poƒçty p≈ôidan√Ωch a vy≈ôe≈°en√Ωch √∫kol≈Ø, s barevn√Ωm rozli≈°en√≠m diferenc√≠
    dv.paragraph(
        `**bilance** **dnes: ${formatDifference(dayTasks.difference)}** *(+${dayTasks.added}/-${dayTasks.completed})*` +
        `, **t: ${formatDifference(last7DaysTasks.difference)}** *(+${last7DaysTasks.added}/-${last7DaysTasks.completed})*` +
        `, **m: ${formatDifference(last30DaysTasks.difference)}** *(+${last30DaysTasks.added}/-${last30DaysTasks.completed})* *(+nov√©/-hotov√©)* | ${inboxValue}`
    );
});
```
